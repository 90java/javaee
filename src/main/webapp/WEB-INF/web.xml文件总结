参考：https://blog.csdn.net/u011277123/article/details/78870006
https://blog.csdn.net/xiaohangblog/article/details/72868659 ***
https://blog.csdn.net/zq17865815296/article/details/79464403
https://www.cnblogs.com/vincentren/p/10753217.html
一般web项目中会存在一个web.xml,文件中会配置上下文信息-servlet-Listener-Filter等等配置,这个文件会在项目启动的时候进行加载，但是该文件不是必须的，因为没有该配置文件时，项目也是可以启动起来的。
在使用tomcat服务器启动时，tomcat会先加载本身的一些配置文件，tomcat中也会有一个web.xml文件。这个文件相当于全局的。项目中也会存在web.xml
，该文件只针对该项目应用，在这个项目中优先级高于tomcat中的web.xml。

在servlet3.0新特性 会存在好多新的注解类。所以在不需要web.xml时也可以写servlet。但是在使用时注意版本号。
http://tomcat.apache.org/whichversion.html 该地址可以可出服务器版本和servlet jsp版本
异步处理支持 【使Servlet线程资源得到释放，线程本身返回容器，启动异步线程完成业务处理】
新增的注解支持 【使部署文件web.xml内的声明可以标签注释即可】
可插性支持 【支持在jar中进行对项目的声明配置Servlet/过滤器/监听器等】
HttpServletRequest 对文件上传的支持 【其实没啥用，已经有解决方案的了╮(╯_╰)╭】
ServletContext 的性能增强 【实现代码加载Servlet、过滤器、监听器】

web.xml为sun公司制定。根目录为<web-app>

servlet 2.3
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
</web-app>

servlet 2.4
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">
</web-app>

servlet 2.5
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
   　　　 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   　　　 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   　　　 version="2.5">
</web-app>

servlet 3.0
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

</web-app>

servlet 3.1
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

</web-app>

servlet 4.0
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
　　　    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

</web-app>

web项目中一个重要的对象 ServletContext:servlet上下文.tomcat启动会给每一应用创建一个ServletContext对象。这里面存这全局的web.xml和项目的web.xml
的键值对。

web.xml配置和servlet3.0新增的注解一样 在项目启动过程会扫描注解和配置

web.xml节点
1.<context-param></context-param>
一对参数名和参数值，用作应用的servlet上下文初始化参数。参数名在整个Web应用中必须是惟一的。可以设置多个。tomcat启动会将该键值对放到servlet上下文中。
  <context-param>
    <param-name>param1</param-name>
    <param-value>value1</param-value>
  </context-param>
  获取方法:
  jsp:${initParam.xxx}
  代码:String param_name=getServletContext().getInitParameter("xxx");
2.<listener> 监听器 实现ServletContextListener接口
listener元素用来注册一个监听器类，可以在Web应用中包含该类。使用listener元素，可以收到事件什么时候发生以及用什么作为响应的通知。
监听web中的一些事件的发生,如果某些事件一旦发生了,那么这个监听器就会调用指定方法进行处理.
  <listener>
    <listener-class>com.nojava.servlet.ApplicationListener</listener-class>
  </listener>
该监听类要实现ServletContextListener接口
注解：@WebListener
3.<filter> 过滤器 实现Filter接口
在一个请求去访问某个资源的时候,filter可以在这个请求访问到这个资源之前,把请求拦下,然后做出一系列的处理或者判断(比如编码的转换,信息的过滤、权限的判断、
是否已经登录的验证等等),最后filter再决定是否要让这个请求去访问那个资源.
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>com.nojava.servlet.EncodingFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
 注解：@WebFilter(filterName = "b",urlPatterns = "/*")
4.<servlet>
  <servlet>
    <servlet-name>test1</servlet-name>
    <servlet-class>com.nojava.servlet.ServletTest1</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>test1</servlet-name>
    <url-pattern>/test1</url-pattern>
  </servlet-mapping>
  注解：@WebServlet(name = "test2",urlPatterns = "/test2")